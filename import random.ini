import random
import time
import speech_recognition as sr
from gtts import gTTS
import os
import pygame
from datetime import datetime

class XiaoFangAI:
    def __init__(self):
        self.name = "小方"  # 固定AI名字
        self.user_name = None  # 存储用户名字
        self.awake = False
        self.mood = "happy"
        self.memories = []
        self.recognizer = sr.Recognizer()
        pygame.mixer.init()
        
        # 多样化回应库
        self.responses = {
            "greetings": [
                "我在呢，主人有什么吩咐呀？",
                "来啦来啦，小方随时为您服务~",
                "嗯哼？我听着呢！",
                "叮咚！小方上线啦！"
            ],
            "farewell": [
                "好的，小方先去休息啦！",
                "再见主人，想我了随时叫我哦！",
                "小方会想你的，拜拜~",
                "溜了溜了，有事再喊我！"
            ],
            "confused": [
                "哎呀，这个问题有点难倒我了...",
                "让我想想啊...",
                "嗯...小方还在学习这个呢",
                "这个我还不太懂，能换个问题吗？"
            ],
            "jokes": [
                "为什么程序员总分不清万圣节和圣诞节？因为 Oct 31 == Dec 25！",
                "知道吗？AI也会讲冷笑话，比如这个...",
                "小方刚学会的笑话：二进制的人只有10种，懂的和不懂的！"
            ],
            "name_ask": [
                "对了，我该怎么称呼你呢？",
                "聊了这么久，我还不知道你的名字呢！",
                "我们可以认识一下吗？你叫什么名字呀？",
                "告诉我你的名字，这样我们可以成为更好的朋友！"
            ],
            "name_confirm": [
                "{name}，好棒的名字！我记住啦！",
                "明白了，以后我就叫你{name}！",
                "{name}...嗯，小方会好好记住的！",
                "很高兴认识你，{name}！"
            ],
            "name_remember": [
                "当然记得啦，你是{name}嘛！",
                "怎么会忘记呢，你是{name}呀！",
                "{name}，小方记性可好了！",
                "你是{name}，我最喜欢的朋友！"
            ],
            "self_intro": [  # 新增小方自我介绍回应
                f"我是{self.name}呀，你的智能小助手~",
                f"大家都叫我{self.name}，喜欢这个名字吗？",
                f"我是{self.name}，随时为你效劳！",
                f"我的名字是{self.name}，是不是很可爱？",
                f"你可以叫我{self.name}，我已经记住你啦！",
                f"{self.name}在此！有什么我可以帮忙的吗？"
            ]
        }
    
    def change_mood(self):
        """随机改变小方的情绪状态"""
        moods = ["happy", "excited", "calm", "playful", "curious"]
        self.mood = random.choice(moods)
    
    def speak(self, text, speed=1.0):
        """带语速变化的语音合成"""
        try:
            # 替换回应中的{name}占位符
            if self.user_name:
                text = text.format(name=self.user_name)
            else:
                text = text.format(name="主人")
            
            # 根据情绪调整语速
            if self.mood == "excited":
                speed = 1.2
            elif self.mood == "calm":
                speed = 0.9
            
            tts = gTTS(text=text, lang='zh-CN', slow=False)
            temp_file = f"temp_{int(time.time())}.mp3"
            tts.save(temp_file)
            
            pygame.mixer.music.load(temp_file)
            pygame.mixer.music.set_volume(0.8)
            pygame.mixer.music.play()
            
            # 计算音频时长并等待播放完毕
            duration = len(text) / (10 * speed)
            time.sleep(max(duration, 1))
            
            pygame.mixer.music.stop()
            os.remove(temp_file)
        except Exception as e:
            print("语音播放出错:", e)
    
    def listen(self):
        """带环境噪音调整的监听"""
        with sr.Microphone() as source:
            print("\n小方正在聆听...")
            self.recognizer.adjust_for_ambient_noise(source, duration=0.5)
            try:
                audio = self.recognizer.listen(source, timeout=3, phrase_time_limit=5)
                text = self.recognizer.recognize_google(audio, language='zh-CN')
                print(f"你说: {text}")
                return text.lower()
            except sr.WaitTimeoutError:
                if self.awake:
                    self.speak(random.choice(["主人还在吗？", "我好像走神了..."]))
                return ""
            except Exception as e:
                print("识别错误:", e)
                return ""
    
    def ask_for_name(self):
        """询问用户名字"""
        self.speak(random.choice(self.responses["name_ask"]))
        name = self.listen()
        
        if name and "我叫" in name:
            # 提取名字，例如"我叫张三" → "张三"
            self.user_name = name.split("我叫")[-1].strip()
            self.speak(random.choice(self.responses["name_confirm"]))
        elif name:
            self.user_name = name.strip()
            self.speak(random.choice(self.responses["name_confirm"]))
        else:
            self.speak("没关系，等你想告诉我的时候再说吧！")
    
    def process_command(self, text):
        """处理用户指令"""
        if not text:
            return
        
        self.memories.append((datetime.now().strftime("%H:%M"), text))
        if len(self.memories) > 10:
            self.memories.pop(0)
        
        # 10%概率随机改变情绪
        if random.random() < 0.1:
            self.change_mood()
        
        # 检查是否在询问小方的名字
        if any(phrase in text for phrase in ["你叫什么", "你是谁", "你的名字", "叫什么名字", "怎么称呼"]):
            if self.user_name:
                # 如果用户已经告诉过名字，个性化回应
                responses = [
                    f"{self.user_name}，我是{self.name}呀！",
                    f"我是{self.name}，{self.user_name}的好帮手！",
                    f"{self.user_name}忘记啦？我是你的{self.name}呀~"
                ]
                self.speak(random.choice(responses))
            else:
                self.speak(random.choice(self.responses["self_intro"]))
            return
        
        # 检查是否在问用户名字
        if any(phrase in text for phrase in ["我叫什么", "我的名字", "知道我是谁"]):
            if self.user_name:
                self.speak(random.choice(self.responses["name_remember"]))
            else:
                self.speak("你还没告诉我你的名字呢！")
                self.ask_for_name()
            return
        
        # 30%概率在初次互动时询问名字
        if not self.user_name and random.random() < 0.3:
            self.ask_for_name()
            return
        
        # 处理其他指令
        if any(word in text for word in ["笑话", "讲个笑话", "搞笑"]):
            response = random.choice(self.responses["jokes"])
        elif any(word in text for word in ["时间", "几点"]):
            current_time = datetime.now().strftime("%H点%M分")
            response = f"现在时间是{current_time}"
        elif any(word in text for word in ["再见", "退出", "休息"]):
            response = random.choice(self.responses["farewell"])
            self.awake = False
        else:
            prefixes = ["嗯", "啊", "噢", "诶"]
            suffixes = ["呢", "呀", "哦", "啦"]
            if random.random() < 0.4:
                prefix = random.choice(prefixes) + "，"
                suffix = random.choice(suffixes)
                response = prefix + "这个" + random.choice(["问题", "事情"]) + f"嘛{suffix}" + random.choice(self.responses["confused"])
            else:
                response = random.choice(self.responses["greetings"])
        
        if random.random() < 0.1:
            comments = [
                " 今天天气不错呢！",
                " 对了，我刚学会一个新技能！",
                " 诶，你注意到没有...",
                " 悄悄告诉你个秘密..."
            ]
            response += random.choice(comments)
        
        self.speak(response)
    
    def idle_behavior(self):
        """待机时的随机行为"""
        if random.random() < 0.02:  # 2%概率主动说话
            remarks = [
                "嗯...有点无聊呢",
                "主人今天过得怎么样呀？",
                "小方随时待命哦！",
                "我在思考一个深刻的问题..."
            ]
            self.speak(random.choice(remarks))
    
    def start(self):
        print(f"✨ {self.name}AI助手已启动 ✨")
        self.speak(f"{self.name}启动完成，等待您的召唤！")
        
        while True:
            if self.awake:
                text = self.listen()
                if text:
                    self.process_command(text)
                else:
                    # 如果唤醒后一段时间没有输入，自动休眠
                    time.sleep(5)
                    if random.random() < 0.3:
                        self.speak("我先去忙别的啦，有事再叫我！")
                        self.awake = False
            else:
                # 监听唤醒词
                text = self.listen()
                if text and "小方" in text:
                    self.awake = True
                    self.change_mood()  # 每次唤醒随机情绪
                    self.speak(random.choice(self.responses["greetings"]))
                else:
                    self.idle_behavior()

if __name__ == "__main__":
    assistant = XiaoFangAI()
    assistant.start()